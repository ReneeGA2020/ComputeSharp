<Project>
  <Import Project="..\build\Directory.Build.props" />

    <!-- Centralized packaging metadata for published projects -->
  <PropertyGroup Condition="$(IsPackagedProject)">

    <!-- Package descriptions-->
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp'">
<![CDATA[A library to run C# code in parallel on the GPU through DX12 and dynamically generated HLSL compute shaders.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.Core'">
<![CDATA[A library containing basic primitives to support ComputeSharp (this package is not supposed to be referenced directly by developers).]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.D2D1'">
<![CDATA[A library to write D2D1 pixel shaders entirely with C# code, and to easily register and create ID2D1Effect-s from them.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.D2D1.Uwp'">
<![CDATA[A UWP library with APIs to leverage D2D1 functionality with D2D1 pixel shaders powered by ComputeSharp.D2D1.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.D2D1.WinUI'">
<![CDATA[A WinUI 3 library with APIs to leverage D2D1 functionality with D2D1 pixel shaders powered by ComputeSharp.D2D1.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.D3D12MemoryAllocator'">
<![CDATA[An extension library for ComputeSharp to enable using D3D12MA as the memory allocator for graphics resources.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.Dynamic'">
<![CDATA[An extension library for ComputeSharp to enable dynamic compilation of shaders at runtime.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.Pix'">
<![CDATA[An extension library for ComputeSharp to enable PIX support to produce debugging information.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.Uwp'">
<![CDATA[A UWP library with controls to render DX12 shaders powered by ComputeSharp.]]>
    </Description>
    <Description Condition="'$(MSBuildProjectName)' == 'ComputeSharp.WinUI'">
<![CDATA[A WinUI 3 library with controls to render DX12 shaders powered by ComputeSharp.]]>
    </Description>

    <!-- Package tags -->
    <PackageTags Condition="$(MSBuildProjectName.Contains('.D2D1'))">$(PackageTags) d2d d2d1 direct2d pixel</PackageTags>
    <PackageTags Condition="$(MSBuildProjectName.EndsWith('.Uwp'))">$(PackageTags) uwp winui</PackageTags>
    <PackageTags Condition="$(MSBuildProjectName.EndsWith('.WinUI'))">$(PackageTags) winui winui3 wasdk</PackageTags>
  </PropertyGroup>

  <!-- Additional properties for all source projects-->
  <PropertyGroup>

    <!--
      Generate documentation files. In theory this should only be abled for published, non source generator projects.
      However, this is always enabled to work around https://github.com/dotnet/roslyn/issues/41640. Until that's fixed,
      source generators will also produce an .xml file with their documentation. Note that this doesn't really impact
      NuGet packages, since the analyzer binaries are packed manually after build, so the .xml files aren't included.
      When this workaround is no longer needed, the same property should also removed for the \samples directory.
    -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <DocumentationFile>$(MSBuildProjectName).xml</DocumentationFile>

    <!-- Disable packing symbols for source generators -->
    <PackSymbols Condition="$(IsSourceGeneratorProject)">false</PackSymbols>

    <!-- Enable extended analyzer rules for all source generators -->
    <EnforceExtendedAnalyzerRules Condition="$(IsSourceGeneratorProject)">true</EnforceExtendedAnalyzerRules>

    <!-- Check whether the project has a .targets file to bundle -->
    <IsTargetsFileAvailableForPacking>false</IsTargetsFileAvailableForPacking>
    <IsTargetsFileAvailableForPacking Condition="$(IsPackagedProject) AND Exists('$(MSBuildProjectName).targets')">true</IsTargetsFileAvailableForPacking>

    <!-- Same check for an optional LICENSE.txt file to bundle -->
    <IsLicenseFileAvailableForPacking>false</IsLicenseFileAvailableForPacking>
    <IsLicenseFileAvailableForPacking Condition="$(IsPackagedProject) AND Exists('LICENSE.txt')">true</IsLicenseFileAvailableForPacking>
  </PropertyGroup>

  <!-- Additional items for published projects -->
  <ItemGroup Condition="$(IsPackagedProject)" Label="Package">

    <!-- Pack the NuGet icon file -->
    <None Include="$(MSBuildThisFileDirectory)..\assets\icon.png" Pack="true" PackagePath="\" Visible="False" />

    <!-- Pack .targets files, if present -->
    <None Condition="$(IsTargetsFileAvailableForPacking)" Include="$(MSBuildProjectName).targets" PackagePath="buildTransitive" Pack="true" />
    <None Condition="$(IsTargetsFileAvailableForPacking)" Include="$(MSBuildProjectName).targets" PackagePath="build" Pack="true" />

    <!-- Pack the license file, if present -->
    <None Condition="$(IsLicenseFileAvailableForPacking)" Include="LICENSE.txt" Pack="true" PackagePath="\" Visible="False" />
  </ItemGroup>

  <!--
    Reference PolySharp for all .NET Standard 2.0 polyfills.
    Only needed for the .Core project and all source generators.
  -->
  <ItemGroup Condition="'$(MSBuildProjectName)' == 'ComputeSharp.Core' OR $(MSBuildProjectName.EndsWith('.SourceGenerators'))">
    <PackageReference Include="PolySharp" Version="1.13.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>build;analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Define the type alias for [UnmanagedCallersOnly] when on the .NET Standard 2.0 target -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <Using Include="System.Runtime.InteropServices2.UnmanagedCallersOnlyAttribute" Alias="UnmanagedCallersOnlyAttribute" />
  </ItemGroup>

  <!-- Configure PolySharp options -->
  <PropertyGroup>
    <PolySharpIncludeRuntimeSupportedAttributes>true</PolySharpIncludeRuntimeSupportedAttributes>
    <PolySharpUseInteropServices2NamespaceForUnmanagedCallersOnlyAttribute>true</PolySharpUseInteropServices2NamespaceForUnmanagedCallersOnlyAttribute>
  </PropertyGroup>
</Project>